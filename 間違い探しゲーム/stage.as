package  {import flash.display.MovieClip;import flash.events.MouseEvent;import caurina.transitions.Tweener;import flash.utils.Timer;import flash.events.TimerEvent;import flash.text.TextField;import flash.text.TextFormat;import flash.utils.getTimer;import flash.events.Event;public class stage extends MovieClip {		var gamestartBar : gameStart;	var pickup : Array = [];	var panel : Array = [];	var max ; //pickup配列の最大数	var maru : Maru;	var batsu : Batsu;	var endflag : Boolean;	public function stage() {				StartScreen();//スタートバー表示	}//////////////////スタートバー表示	function StartScreen(){		//スタートバー表示		gamestartBar = new gameStart();		gamestartBar.x = 180;		gamestartBar.y = 350;		addChild(gamestartBar);		//ゲームスタートボタンが押されたら、カウントダウンスタート		gamestartBar.addEventListener(MouseEvent.CLICK, CountDownStart);		endflag = true;	}	///////////////カウントダウンスタート	var countdownTimer : Timer;	var countdown : TextField;	var format2 : TextFormat;	function CountDownStart(e : MouseEvent){ //カウントダウンをする		//スタートバー削除		removeChild(gamestartBar);				//カウントダウンタイマー作成		countdownTimer = new Timer(1000, 3);		//テキストフォーマット設定		format2 = new TextFormat();		format2.size = 72;		format2.color = 0x000000;		format2.font = "Time";		//テキストフィールド設定		countdown = new TextField();		countdown.defaultTextFormat = format2;		countdown.x = stage.stageWidth/2 - 10;		countdown.y = stage.stageHeight/2 - 50;		countdown.selectable = false;		//タイマー起動と表示		countdownTimer.start();		countdown.text =  String(3 - countdownTimer.currentCount);		addChild(countdown);		//カウントを更新		countdownTimer.addEventListener(TimerEvent.TIMER, function(){　										countdown.text =  String(3 - countdownTimer.currentCount);});		//カウント終了後の処理		countdownTimer.addEventListener(TimerEvent.TIMER_COMPLETE, function(){										removeChild(countdown);countdown = null;});					//３秒後にゲームスタート						Tweener.addTween( this ,{ time:3, onComplete:GameStart});	}	//////////////////////////ゲームスタート	function GameStart(){		//画面内要素の初期化		Initialize();		//表示		Display();		//リロード処理		addEventListener(MouseEvent.CLICK, Reload);	}	//////////////////////////初期化処理	var gameTimer : Timer;	var timebar : TextField;	var format : TextFormat;	function Initialize(){		///////////////////パネルの初期化		max = 4;		DoPickup();		SetPanel();		//////////////////ゲームタイマーの初期化		//ゲームタイマー作成		gameTimer = new Timer(100, 60);		//テキストフォーマット設定		format = new TextFormat();		format.size = 18;		format.color = 0x0000FF;		format.font = "Osaka";		//テキストフィールド設定		timebar = new TextField();		timebar.defaultTextFormat = format;		timebar.x = stage.stageWidth - 200;		timebar.y = 30;		timebar.width = 220;		timebar.height = 100;		timebar.selectable = false;				//カウントを更新		gameTimer.addEventListener(TimerEvent.TIMER, function(){//60秒からカウントダウン										timebar.text =  "残り時間： " + (60 - gameTimer.currentCount) + "秒";});		//カウント終了後の処理		gameTimer.addEventListener(TimerEvent.TIMER_COMPLETE, function(){//0秒表示										timebar.text =  "残り時間： " + (60 - gameTimer.currentCount) + "秒";																				//////ゲーム終了後、クリック不能にして、リスタートボタン追加										GameEnd();										});			////////////////////得点部分の初期化	}///////////////////////初期化の内部処理	//pickup配列に文字オブジェクトを入れる	function DoPickup(){		var n : int = Math.floor(Math.random()*3)//0~2 trace(n);		switch(n){//問1~3までランダムに選ぶ			case 0://問1				pickup[0] = new a();				pickup[1] = new me();				pickup[2] = new me();				pickup[3] = new me();				pickup[0].no = 1; //1=正解、0=誤解				pickup[1].no = 0;				pickup[2].no = 0;				pickup[3].no = 0;				break;			case 1://問2				pickup[0] = new _ne();				pickup[1] = new wa();				pickup[2] = new wa();				pickup[3] = new wa();				pickup[0].no = 1;				pickup[1].no = 0;				pickup[2].no = 0;				pickup[3].no = 0;				break;			case 2://問3				pickup[0] = new me();				pickup[1] = new nu();				pickup[2] = new nu();				pickup[3] = new nu();				pickup[0].no = 1;				pickup[1].no = 0;				pickup[2].no = 0;				pickup[3].no = 0;				break;		}	}	//パネル配列にpickup配列に入れた文字オブジェクトをランダムで入れる		function SetPanel(){		panel[0] = Choose();		panel[1] = Choose();		panel[2] = Choose();		panel[3] = Choose();		}	//pickup配列の中から重複なく一つを選ぶ	function Choose(): MovieClip{ 		var n : int = Math.floor(Math.random()*max); // 0~max-1(=3)の間のランダムな値を返す		var ret : MovieClip = pickup[n];		//次回引くときに備えた処理		pickup[n] = pickup[max-1]; //選んだpickup配列の中に、一番最後の中身を入れる		max--;　//次Choose()呼ぶときにはpickup配列の最後を選ばないように…		return ret;	}////////////////////////表示処理	function Display(){ /*４つのパネルを所定の位置に表示*/				///////////////////パネル部分の表示		panel[0].x = 30;		panel[0].y = 30;		base.addChild(panel[0]);		panel[1].x = 30+125+10;		panel[1].y = 30;		base.addChild(panel[1]);			panel[2].x = 30;		panel[2].y = 30+125+10;		base.addChild(panel[2]);			panel[3].x = 30+125+10;		panel[3].y = 30+125+10;		base.addChild(panel[3]);				//////////////////タイマー起動と表示		gameTimer.start();		timebar.text =  "残り時間： " + (60 - gameTimer.currentCount) + "秒";		addChild(timebar);		///////////////////得点部分の表示	}/////////////////////////////////////////////////////////ゲーム開始、リロードの処理	function Reload(e : MouseEvent){		if(!maru && !batsu){//○か×がすでに表示されているときはリロードしない			if(e.target.no == 1){				maru = new Maru();				maru.x = e.target.x;				maru.y = e.target.y;				addChild(maru); //addChildは(0,0)に表示。this.addChildだと常に最前面のレイヤーに表示。			}else if(e.target.no == 0){				batsu = new Batsu();				batsu.x = e.target.x;				batsu.y = e.target.y;				addChild(batsu);			}			//Tweenで1秒後にパネルの更新			Tweener.addTween( this ,{ time:0.5, onComplete: PanelReload});		}	}		function PanelReload(){		//if(endflag) return;		//○×を削除		if(maru){			removeChild(maru);			maru = null;		}		if(batsu){			removeChild(batsu);			batsu = null;		}		//パネル更新		max = 4;		DoPickup();		SetPanel();		//パネル再表示		panel[0].x = 30;		panel[0].y = 30;		base.addChild(panel[0]);		panel[1].x = 30+125+10;		panel[1].y = 30;		base.addChild(panel[1]);			panel[2].x = 30;		panel[2].y = 30+125+10;		base.addChild(panel[2]);			panel[3].x = 30+125+10;		panel[3].y = 30+125+10;		base.addChild(panel[3]);			}	/////////////////////ゲームエンド	function GameEnd(){		endflag = true;				removeEventListener(MouseEvent.CLICK, Reload);		removeChild(base);		var bg = new Bg();		addChild(bg);		addChild(gamestartBar);	}			}}